generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String                   @id @default(cuid())
  email          String                   @unique
  name           String?
  displayName    String?
  ageGroupId     String?
  ageGroup       AgeGroup?                @relation(fields: [ageGroupId], references: [id], onDelete: SetNull)
  enrollments    LearningPathEnrollment[]
  attempts       Attempt[]
  progresses     Progress[]
  rewards        Reward[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}

model AgeGroup {
  id                   String                @id @default(cuid())
  slug                 String                @unique
  name                 String
  minAge               Int
  maxAge               Int
  description          String?
  learningPaths        LearningPath[]
  curriculumStandards  CurriculumStandard[]
  contentModules       ContentModule[]
  users                User[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model LearningPath {
  id             String                   @id @default(cuid())
  slug           String                   @unique
  title          String
  description    String?
  ageGroupId     String
  ageGroup       AgeGroup                 @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
  modules        ContentModule[]
  enrollments    LearningPathEnrollment[]
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}

model LearningPathEnrollment {
  id             String   @id @default(cuid())
  userId         String
  learningPathId String
  status         String   @default("ACTIVE")
  startedAt      DateTime @default(now())
  completedAt    DateTime?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)

  @@unique([userId, learningPathId])
}

model CurriculumStandard {
  id                   String          @id @default(cuid())
  bnccCode             String
  componenteCurricular String          @default("")
  unidadeTematica      String          @default("")
  objetoConhecimento   String          @default("[]")
  competency           String
  habilidades          String
  description          String?
  referencias          String?
  ageGroupId           String
  ageGroup             AgeGroup        @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
  contentModules       ContentModule[]
  activities           Activity[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  @@unique([bnccCode, ageGroupId])
}

model ContentModule {
  id                    String              @id @default(cuid())
  slug                  String              @unique
  title                 String
  subtitle              String?
  description           String?
  theme                 String?
  learningOutcomes      String?
  ageGroupId            String
  ageGroup              AgeGroup            @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
  learningPathId        String?
  learningPath          LearningPath?       @relation(fields: [learningPathId], references: [id], onDelete: SetNull)
  curriculumStandardId  String?
  curriculumStandard    CurriculumStandard? @relation(fields: [curriculumStandardId], references: [id], onDelete: SetNull)
  activities            Activity[]
  progresses            Progress[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Activity {
  id                   String             @id @default(cuid())
  slug                 String             @unique
  title                String
  prompt               String?
  activityType         String             @default("GAME")
  difficulty           String             @default("BEGINNER")
  description          String?
  contentModuleId      String
  contentModule        ContentModule      @relation(fields: [contentModuleId], references: [id], onDelete: Cascade)
  curriculumStandardId String
  curriculumStandard   CurriculumStandard @relation(fields: [curriculumStandardId], references: [id], onDelete: Cascade)
  metadata             String?
  attempts             Attempt[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Attempt {
  id               String    @id @default(cuid())
  userId           String
  activityId       String
  success          Boolean
  score            Int?
  maxScore         Int?
  accuracy         Float?
  timeSpentSeconds Int?
  startedAt        DateTime?
  completedAt      DateTime?
  submittedAt      DateTime  @default(now())
  metadata         String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity         Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Progress {
  id               String   @id @default(cuid())
  userId           String
  contentModuleId  String
  completion       Int      @default(0)
  status           String   @default("NOT_STARTED")
  lastActivityAt   DateTime?
  totalAttempts    Int      @default(0)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentModule    ContentModule @relation(fields: [contentModuleId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, contentModuleId])
}

model Reward {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  criteria    String?
  icon        String?
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
}
